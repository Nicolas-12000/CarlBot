---
import Layout from '../layouts/Layout.astro';
---

<Layout title="CarlBot - Dashboard">
  <div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b border-gray-200">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center py-4">
          <div class="flex items-center">
            <div class="h-8 w-8 bg-blue-600 rounded-lg flex items-center justify-center mr-3">
              <i data-lucide="bot" class="h-5 w-5 text-white"></i>
            </div>
            <h1 class="text-xl font-semibold text-gray-900">CarlBot Dashboard</h1>
          </div>
          
          <div class="flex items-center space-x-4">
            <!-- Estado del bot -->
            <div id="botStatus" class="flex items-center space-x-2">
              <div class="h-2 w-2 bg-gray-400 rounded-full"></div>
              <span class="text-sm text-gray-600">Conectando...</span>
            </div>
            
            <!-- Menú de usuario -->
            <div class="flex items-center space-x-2">
              <span id="userPhone" class="text-sm text-gray-700"></span>
              <button
                id="logoutButton"
                class="text-sm text-red-600 hover:text-red-800 transition-colors"
              >
                Cerrar Sesión
              </button>
            </div>
          </div>
        </div>
      </div>
    </header>

    <!-- Contenido principal -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Estadísticas principales -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-2 bg-blue-100 rounded-lg">
              <i data-lucide="calendar" class="h-6 w-6 text-blue-600"></i>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Eventos Activos</p>
              <p id="totalEvents" class="text-2xl font-semibold text-gray-900">-</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-2 bg-green-100 rounded-lg">
              <i data-lucide="users" class="h-6 w-6 text-green-600"></i>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Suscriptores</p>
              <p id="totalSubscribers" class="text-2xl font-semibold text-gray-900">-</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-2 bg-purple-100 rounded-lg">
              <i data-lucide="clock" class="h-6 w-6 text-purple-600"></i>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Próximas Ponencias</p>
              <p id="upcomingSchedules" class="text-2xl font-semibold text-gray-900">-</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-2 bg-yellow-100 rounded-lg">
              <i data-lucide="smartphone" class="h-6 w-6 text-yellow-600"></i>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Estado del Bot</p>
              <p id="botConnectionStatus" class="text-2xl font-semibold text-gray-900">-</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Navegación de secciones -->
      <div class="bg-white rounded-lg shadow mb-8">
        <div class="border-b border-gray-200">
          <nav class="flex space-x-8 px-6" aria-label="Tabs">
            <button
              id="tabEvents"
              class="tab-button active border-b-2 border-blue-500 py-4 px-1 text-sm font-medium text-blue-600"
            >
              Eventos
            </button>
            <button
              id="tabSchedules"
              class="tab-button border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 hover:text-gray-700"
            >
              Horarios
            </button>
            <button
              id="tabSubscribers"
              class="tab-button border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 hover:text-gray-700"
            >
              Suscriptores
            </button>
            <button
              id="tabSettings"
              class="tab-button border-b-2 border-transparent py-4 px-1 text-sm font-medium text-gray-500 hover:text-gray-700"
            >
              Configuración
            </button>
          </nav>
        </div>

        <!-- Contenido de las pestañas -->
        <div class="p-6">
          <!-- Sección de Eventos -->
          <div id="contentEvents" class="tab-content">
            <div class="flex justify-between items-center mb-6">
              <h2 class="text-lg font-medium text-gray-900">Gestión de Eventos</h2>
              <button
                id="btnNewEvent"
                class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
              >
                <i data-lucide="plus" class="h-4 w-4"></i>
                <span>Nuevo Evento</span>
              </button>
            </div>
            
            <div id="eventsContainer" class="space-y-4">
              <!-- Los eventos se cargarán aquí dinámicamente -->
            </div>
          </div>

          <!-- Sección de Horarios -->
          <div id="contentSchedules" class="tab-content hidden">
            <div class="flex justify-between items-center mb-6">
              <h2 class="text-lg font-medium text-gray-900">Horarios de Ponencias</h2>
              <button
                id="btnNewSchedule"
                class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors"
              >
                <i data-lucide="plus" class="h-4 w-4"></i>
                <span>Nueva Ponencia</span>
              </button>
            </div>
            
            <div id="schedulesContainer" class="space-y-4">
              <!-- Los horarios se cargarán aquí dinámicamente -->
            </div>
          </div>

          <!-- Sección de Suscriptores -->
          <div id="contentSubscribers" class="tab-content hidden">
            <h2 class="text-lg font-medium text-gray-900 mb-6">Suscriptores por Evento</h2>
            <div id="subscribersContainer" class="space-y-4">
              <!-- Los suscriptores se cargarán aquí dinámicamente -->
            </div>
          </div>

          <!-- Sección de Configuración -->
          <div id="contentSettings" class="tab-content hidden">
            <h2 class="text-lg font-medium text-gray-900 mb-6">Configuración del Bot</h2>
            
            <div class="space-y-6">
              <!-- Configuración del número de teléfono -->
              <div class="bg-gray-50 rounded-lg p-4">
                <h3 class="text-md font-medium text-gray-900 mb-4">Número de Teléfono del Bot</h3>
                <div class="flex items-center space-x-4">
                  <input
                    id="botPhoneInput"
                    type="tel"
                    class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="+573001234567"
                  />
                  <button
                    id="updatePhoneButton"
                    class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
                  >
                    Actualizar
                  </button>
                </div>
              </div>

              <!-- Prueba de mensajes -->
              <div class="bg-gray-50 rounded-lg p-4">
                <h3 class="text-md font-medium text-gray-900 mb-4">Prueba de Mensajes</h3>
                <div class="space-y-4">
                  <input
                    id="testPhoneInput"
                    type="tel"
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Número para prueba (ej: +573001234567)"
                  />
                  <textarea
                    id="testMessageInput"
                    rows="3"
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Mensaje de prueba"
                  ></textarea>
                  <button
                    id="sendTestMessageButton"
                    class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors"
                  >
                    Enviar Mensaje de Prueba
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- Modal para nuevo evento -->
  <div id="eventModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden flex items-center justify-center">
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
      <div class="px-6 py-4 border-b border-gray-200">
        <h3 class="text-lg font-medium text-gray-900">Nuevo Evento</h3>
      </div>
      
      <form id="eventForm" class="px-6 py-4 space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Nombre del Evento</label>
          <input
            type="text"
            name="name"
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Descripción</label>
          <textarea
            name="description"
            rows="3"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          ></textarea>
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Fecha y Hora</label>
          <input
            type="datetime-local"
            name="date"
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Ubicación</label>
          <input
            type="text"
            name="location"
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Enlace de Google Maps</label>
          <input
            type="url"
            name="mapsLink"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="https://maps.google.com/..."
          />
        </div>
      </form>
      
      <div class="px-6 py-4 bg-gray-50 flex justify-end space-x-3">
        <button
          id="cancelEventButton"
          type="button"
          class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
        >
          Cancelar
        </button>
        <button
          id="saveEventButton"
          type="submit"
          form="eventForm"
          class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700"
        >
          Guardar Evento
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
    // Declarar lucide como una variable global
    declare const lucide: any;
  
    const API_BASE_URL = 'http://localhost:3000/api';
    let authToken = '';
    let currentEvents = [];
  
    // Verificar autenticación
    function checkAuth() {
      const token = localStorage.getItem('carlbot_token');
      const user = localStorage.getItem('carlbot_user');
      
      if (!token || !user) {
        window.location.href = '/';
        return false;
      }
      
      authToken = token;
      const userData = JSON.parse(user);
      document.getElementById('userPhone')!.textContent = userData.phoneNumber;
      
      return true;
    }
  
    // Hacer petición autenticada
    async function authFetch(url: string, options: RequestInit = {}) {
      return fetch(`${API_BASE_URL}${url}`, {
        ...options,
        headers: {
          ...options.headers,
          'Authorization': `Bearer ${authToken}`,
          'Content-Type': 'application/json',
        },
      });
    }
  
    // Cargar datos del dashboard
    async function loadDashboardData() {
      try {
        const response = await authFetch('/dashboard');
        const data = await response.json();
        
        if (data.success) {
          const { summary, events, upcomingSchedules } = data.data;
          
          // Actualizar estadísticas
          document.getElementById('totalEvents')!.textContent = summary.totalEvents.toString();
          document.getElementById('totalSubscribers')!.textContent = summary.totalSubscribers.toString();
          document.getElementById('upcomingSchedules')!.textContent = summary.upcomingSchedules.toString();
          document.getElementById('botConnectionStatus')!.textContent = summary.botConnected ? 'Conectado' : 'Desconectado';
          
          // Actualizar estado del bot en el header
          const botStatus = document.getElementById('botStatus');
          const statusDot = botStatus?.querySelector('div');
          const statusText = botStatus?.querySelector('span');
          
          if (summary.botConnected) {
            statusDot?.classList.remove('bg-gray-400');
            statusDot?.classList.add('bg-green-400');
            statusText!.textContent = 'Bot Conectado';
          } else {
            statusDot?.classList.remove('bg-green-400');
            statusDot?.classList.add('bg-red-400');
            statusText!.textContent = 'Bot Desconectado';
          }
          
          // Guardar eventos para uso posterior
          currentEvents = events;
          
          // Cargar eventos en la interfaz
          loadEvents(events);
        }
      } catch (error) {
        console.error('Error cargando dashboard:', error);
      }
    }
  
    // Cargar eventos en la interfaz
    function loadEvents(events: any[]) {
      const container = document.getElementById('eventsContainer');
      if (!container) return;
      
      if (events.length === 0) {
        container.innerHTML = `
          <div class="text-center py-8 text-gray-500">
            <i data-lucide="calendar-x" class="h-12 w-12 mx-auto mb-4 text-gray-300"></i>
            <p>No hay eventos creados</p>
            <p class="text-sm">Crea tu primer evento para comenzar</p>
          </div>
        `;
        return;
      }
      
      container.innerHTML = events.map(event => `
        <div class="border border-gray-200 rounded-lg p-4">
          <div class="flex justify-between items-start">
            <div class="flex-1">
              <h3 class="text-lg font-medium text-gray-900">${event.name}</h3>
              ${event.description ? `<p class="text-gray-600 mt-1">${event.description}</p>` : ''}
              <div class="mt-2 space-y-1">
                <p class="text-sm text-gray-500 flex items-center">
                  <i data-lucide="calendar" class="h-4 w-4 mr-2"></i>
                  ${new Date(event.date).toLocaleDateString('es-ES', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </p>
                <p class="text-sm text-gray-500 flex items-center">
                  <i data-lucide="map-pin" class="h-4 w-4 mr-2"></i>
                  ${event.location}
                </p>
              </div>
            </div>
            <div class="flex space-x-2 ml-4">
              <button class="text-blue-600 hover:text-blue-800 p-2">
                <i data-lucide="edit" class="h-4 w-4"></i>
              </button>
              <button class="text-red-600 hover:text-red-800 p-2">
                <i data-lucide="trash-2" class="h-4 w-4"></i>
              </button>
            </div>
          </div>
        </div>
      `).join('');
      
      // Reinicializar iconos
      if (typeof lucide !== 'undefined') {
        lucide.createIcons();
      }
    }
  
    // Manejar pestañas
    function initTabs() {
      const tabButtons = document.querySelectorAll('.tab-button');
      const tabContents = document.querySelectorAll('.tab-content');
      
      tabButtons.forEach(button => {
        button.addEventListener('click', () => {
          const tabId = button.id.replace('tab', '').toLowerCase();
          
          // Actualizar botones
          tabButtons.forEach(btn => {
            btn.classList.remove('active', 'border-blue-500', 'text-blue-600');
            btn.classList.add('border-transparent', 'text-gray-500');
          });
          
          button.classList.add('active', 'border-blue-500', 'text-blue-600');
          button.classList.remove('border-transparent', 'text-gray-500');
          
          // Actualizar contenido
          tabContents.forEach(content => {
            content.classList.add('hidden');
          });
          
          document.getElementById(`content${tabId.charAt(0).toUpperCase() + tabId.slice(1)}`)?.classList.remove('hidden');
        });
      });
    }
  
    // Manejar modal de eventos
    function initEventModal() {
      const modal = document.getElementById('eventModal');
      const openButton = document.getElementById('btnNewEvent');
      const cancelButton = document.getElementById('cancelEventButton');
      const form = document.getElementById('eventForm') as HTMLFormElement;
      
      openButton?.addEventListener('click', () => {
        modal?.classList.remove('hidden');
      });
      
      cancelButton?.addEventListener('click', () => {
        modal?.classList.add('hidden');
        form?.reset();
      });
      
      form?.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(form);
        const eventData = {
          name: formData.get('name'),
          description: formData.get('description'),
          date: formData.get('date'),
          location: formData.get('location'),
          mapsLink: formData.get('mapsLink'),
        };
        
        try {
          const response = await authFetch('/events', {
            method: 'POST',
            body: JSON.stringify(eventData),
          });
          
          const result = await response.json();
          
          if (result.success) {
            modal?.classList.add('hidden');
            form.reset();
            await loadDashboardData(); // Recargar datos
          } else {
            alert('Error creando evento: ' + result.error);
          }
        } catch (error) {
          console.error('Error creando evento:', error);
          alert('Error de conexión');
        }
      });
    }
  
    // Cerrar sesión
    function initLogout() {
      document.getElementById('logoutButton')?.addEventListener('click', () => {
        localStorage.removeItem('carlbot_token');
        localStorage.removeItem('carlbot_user');
        window.location.href = '/';
      });
    }
  
    // Inicializar página
    if (checkAuth()) {
      initTabs();
      initEventModal();
      initLogout();
      loadDashboardData();
    }
  </script>