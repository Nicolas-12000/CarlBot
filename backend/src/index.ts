import dotenv from 'dotenv';
import { APIServer } from './Infrastructure/api/server';
import { ReminderScheduler } from './Infrastructure/scheduler/scheduler';
import { testConnection } from './Infrastructure/database/conections';

// Cargar variables de entorno
dotenv.config();

class CarlBotApplication {
  private apiServer: APIServer;
  private reminderScheduler: ReminderScheduler;

  constructor() {
    console.log('ü§ñ Iniciando CarlBot - Sistema de Gesti√≥n de Eventos');
    
    // Inicializar servidor API
    this.apiServer = new APIServer(parseInt(process.env.PORT || '3000'));
    
    // Inicializar programador de recordatorios
    this.reminderScheduler = new ReminderScheduler(this.apiServer.getWhatsAppBotUseCase());
  }

  async start(): Promise<void> {
    try {
      // 1. Verificar conexi√≥n a base de datos
      console.log('üîç Verificando conexi√≥n a base de datos...');
      const dbConnected = await testConnection();
      
      if (!dbConnected) {
        throw new Error('No se pudo conectar a la base de datos');
      }

      // 2. Inicializar configuraci√≥n inicial si es necesario
      await this.initializeDefaultSettings();

      // 3. Iniciar servidor API
      console.log('üåê Iniciando servidor API...');
      await this.apiServer.start();

      // 4. Iniciar programador de recordatorios
      console.log('‚è∞ Iniciando programador de recordatorios...');
      this.reminderScheduler.start();

      // 5. Configurar manejo de se√±ales del sistema
      this.setupGracefulShutdown();

      console.log('‚úÖ CarlBot iniciado exitosamente');
      console.log('üì± Esperando conexi√≥n de WhatsApp...');
      console.log('üåç Panel administrativo disponible en: http://localhost:4321');
      console.log('üîó API disponible en: http://localhost:3000');

    } catch (error) {
      console.error('‚ùå Error iniciando CarlBot:', error);
      process.exit(1);
    }
  }

  private async initializeDefaultSettings(): Promise<void> {
    try {
      // Aqu√≠ podr√≠as inicializar configuraciones por defecto
      // como crear un usuario administrador inicial, etc.
      console.log('‚öôÔ∏è Inicializando configuraciones por defecto...');
    } catch (error) {
      console.error('‚ùå Error inicializando configuraciones:', error);
    }
  }

  private setupGracefulShutdown(): void {
    const shutdown = async (signal: string) => {
      console.log(`\nüõë Recibida se√±al ${signal}. Cerrando aplicaci√≥n...`);
      
      try {
        // Detener programador de recordatorios
        this.reminderScheduler.stop();
        
        // Desconectar WhatsApp
        await this.apiServer.getWhatsAppService().disconnect();
        
        console.log('‚úÖ Aplicaci√≥n cerrada correctamente');
        process.exit(0);
      } catch (error) {
        console.error('‚ùå Error cerrando aplicaci√≥n:', error);
        process.exit(1);
      }
    };

    // Manejar se√±ales del sistema
    process.on('SIGTERM', () => shutdown('SIGTERM'));
    process.on('SIGINT', () => shutdown('SIGINT'));
    
    // Manejar errores no capturados
    process.on('uncaughtException', (error) => {
      console.error('‚ùå Error no capturado:', error);
      shutdown('UNCAUGHT_EXCEPTION');
    });

    process.on('unhandledRejection', (reason, promise) => {
      console.error('‚ùå Promesa rechazada no manejada:', reason);
      shutdown('UNHANDLED_REJECTION');
    });
  }
}

// Iniciar la aplicaci√≥n
const app = new CarlBotApplication();
app.start().catch((error) => {
  console.error('‚ùå Error fatal iniciando aplicaci√≥n:', error);
  process.exit(1);
});